version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - logistics-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka
    networks:
      - logistics-network

  postgres:
    image: postgres:13
    container_name: logistics-postgres
    environment:
      POSTGRES_PASSWORD: varad123
      POSTGRES_USER: vb
      POSTGRES_DB: logistics_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vb -d logistics_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - logistics-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - logistics-network

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_LOCAL_IP=spark-master
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - JAVA_HOME=/opt/bitnami/java
      # Explicitly disable Hadoop dependencies
      - SPARK_HADOOP_CONF_DIR=/tmp/empty-hadoop-conf
      - HADOOP_CONF_DIR=/tmp/empty-hadoop-conf
    volumes:
      - ./empty-hadoop-conf:/tmp/empty-hadoop-conf:ro
      - ./spark-jars:/opt/bitnami/spark/jars:ro
    networks:
      - logistics-network

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_LOCAL_IP=spark-worker
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - JAVA_HOME=/opt/bitnami/java
      - SPARK_HADOOP_CONF_DIR=/tmp/empty-hadoop-conf
      - HADOOP_CONF_DIR=/tmp/empty-hadoop-conf
    volumes:
      - ./empty-hadoop-conf:/tmp/empty-hadoop-conf:ro
      - ./spark-jars:/opt/bitnami/spark/jars:ro
    networks:
      - logistics-network

  etl-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: etl-app
    depends_on:
      - spark-master
      - kafka
      - postgres
      - redis
    environment:
      - PYTHONUNBUFFERED=1
      - SPARK_MASTER=spark-master:7077
      - KAFKA_BROKER=kafka:29092
      - POSTGRES_HOST=logistics-postgres
      - REDIS_HOST=redis
    volumes:
      - ./etl_script.py:/app/etl_script.py
      - ./spark-jars:/app/jars
    networks:
      - logistics-network
    command: python /app/etl_script.py

volumes:
  postgres_data:

networks:
  logistics-network:
    driver: bridge